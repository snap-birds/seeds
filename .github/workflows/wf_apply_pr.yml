name: PR apply

on:
  pull_request:
    types:
      - closed
      - auto_merge_enabled
    # branches:
    #   - "main"
    paths:
      - 'applications/**'

  workflow_dispatch:
    inputs:
      application_id:
        required: true
        type: string
        description: application ID

jobs:
  deploy_changes:
    runs-on: ubuntu-latest
    name: Deploy changes
    steps:
      - uses: actions/github-script@v7
        id: getApp
        if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
        with:
          script: |
            const regex = /\[Label.*\]\[(?<app>.*)\] .*/;
            const title =
              context.payload &&
              context.payload.pull_request &&
              context.payload.pull_request.title

            if (context.event_name == 'pull_request') {
              const application = regex.exec(title).groups['app'];
            } else {
              const application = core.getInput('application_id');
            }
            core.setOutput('application', application);

      - uses: actions/checkout@v4

      # Terraform install
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      # Terraform Init
      - name: Initialize Terraform
        id: init
        env:
          tf_workspace_path: "applications/${{ steps.getApp.outputs.application }}"
        run: 'terraform -chdir=${{ env.tf_workspace_path }} init'

      # Terraform Validate
      - name: Terraform Validate
        id: validate
        env:
          tf_workspace_path: "applications/${{ steps.getApp.outputs.application }}"
        run: 'terraform -chdir=${{ env.tf_workspace_path }} validate'

      # Terraform Plan
      - name: Plan Terraform
        id: plan
        env:
          tf_workspace_path: "applications/${{ steps.getApp.outputs.application }}"
        run: |
          set -o pipefail
          terraform -chdir=${{ env.tf_workspace_path }} plan -no-color -input=false | tee plan.log
        continue-on-error: true

      # Plan status
      - name: Exit on plan fail
        if: steps.plan.outcome == 'failure'
        run: exit 1
